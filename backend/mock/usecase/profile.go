// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/profile.go

// Package usecase is a generated GoMock package.
package usecase

import (
	context "context"
	reflect "reflect"

	domain "github.com/MISW/Portal/backend/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockProfileUsecase is a mock of ProfileUsecase interface.
type MockProfileUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockProfileUsecaseMockRecorder
}

// MockProfileUsecaseMockRecorder is the mock recorder for MockProfileUsecase.
type MockProfileUsecaseMockRecorder struct {
	mock *MockProfileUsecase
}

// NewMockProfileUsecase creates a new mock instance.
func NewMockProfileUsecase(ctrl *gomock.Controller) *MockProfileUsecase {
	mock := &MockProfileUsecase{ctrl: ctrl}
	mock.recorder = &MockProfileUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProfileUsecase) EXPECT() *MockProfileUsecaseMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockProfileUsecase) Get(ctx context.Context, userID int) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, userID)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockProfileUsecaseMockRecorder) Get(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockProfileUsecase)(nil).Get), ctx, userID)
}

// GetPaymentStatuses mocks base method.
func (m *MockProfileUsecase) GetPaymentStatuses(ctx context.Context, userID int) ([]*domain.PaymentStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentStatuses", ctx, userID)
	ret0, _ := ret[0].([]*domain.PaymentStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentStatuses indicates an expected call of GetPaymentStatuses.
func (mr *MockProfileUsecaseMockRecorder) GetPaymentStatuses(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentStatuses", reflect.TypeOf((*MockProfileUsecase)(nil).GetPaymentStatuses), ctx, userID)
}

// GetPaymentTransaction mocks base method.
func (m *MockProfileUsecase) GetPaymentTransaction(ctx context.Context, userID int) (*domain.PaymentTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentTransaction", ctx, userID)
	ret0, _ := ret[0].(*domain.PaymentTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentTransaction indicates an expected call of GetPaymentTransaction.
func (mr *MockProfileUsecaseMockRecorder) GetPaymentTransaction(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentTransaction", reflect.TypeOf((*MockProfileUsecase)(nil).GetPaymentTransaction), ctx, userID)
}

// Update mocks base method.
func (m *MockProfileUsecase) Update(ctx context.Context, registeredUser, user *domain.User) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, registeredUser, user)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockProfileUsecaseMockRecorder) Update(ctx, registeredUser, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockProfileUsecase)(nil).Update), ctx, registeredUser, user)
}
