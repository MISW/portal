// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces/api/public/session.go

// Package public is a generated GoMock package.
package public

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	echo "github.com/labstack/echo/v4"
)

// MockSessionHandler is a mock of SessionHandler interface.
type MockSessionHandler struct {
	ctrl     *gomock.Controller
	recorder *MockSessionHandlerMockRecorder
}

// MockSessionHandlerMockRecorder is the mock recorder for MockSessionHandler.
type MockSessionHandlerMockRecorder struct {
	mock *MockSessionHandler
}

// NewMockSessionHandler creates a new mock instance.
func NewMockSessionHandler(ctrl *gomock.Controller) *MockSessionHandler {
	mock := &MockSessionHandler{ctrl: ctrl}
	mock.recorder = &MockSessionHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionHandler) EXPECT() *MockSessionHandlerMockRecorder {
	return m.recorder
}

// Callback mocks base method.
func (m *MockSessionHandler) Callback(e echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Callback", e)
	ret0, _ := ret[0].(error)
	return ret0
}

// Callback indicates an expected call of Callback.
func (mr *MockSessionHandlerMockRecorder) Callback(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Callback", reflect.TypeOf((*MockSessionHandler)(nil).Callback), e)
}

// Login mocks base method.
func (m *MockSessionHandler) Login(e echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", e)
	ret0, _ := ret[0].(error)
	return ret0
}

// Login indicates an expected call of Login.
func (mr *MockSessionHandlerMockRecorder) Login(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockSessionHandler)(nil).Login), e)
}

// Signup mocks base method.
func (m *MockSessionHandler) Signup(e echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Signup", e)
	ret0, _ := ret[0].(error)
	return ret0
}

// Signup indicates an expected call of Signup.
func (mr *MockSessionHandlerMockRecorder) Signup(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Signup", reflect.TypeOf((*MockSessionHandler)(nil).Signup), e)
}

// VerifyEmail mocks base method.
func (m *MockSessionHandler) VerifyEmail(e echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyEmail", e)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyEmail indicates an expected call of VerifyEmail.
func (mr *MockSessionHandlerMockRecorder) VerifyEmail(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyEmail", reflect.TypeOf((*MockSessionHandler)(nil).VerifyEmail), e)
}
