// Code generated by MockGen. DO NOT EDIT.
// Source: internal/rest/response.go

// Package rest is a generated GoMock package.
package rest

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	echo "github.com/labstack/echo/v4"
)

// MockErrorResponse is a mock of ErrorResponse interface.
type MockErrorResponse struct {
	ctrl     *gomock.Controller
	recorder *MockErrorResponseMockRecorder
}

// MockErrorResponseMockRecorder is the mock recorder for MockErrorResponse.
type MockErrorResponseMockRecorder struct {
	mock *MockErrorResponse
}

// NewMockErrorResponse creates a new mock instance.
func NewMockErrorResponse(ctrl *gomock.Controller) *MockErrorResponse {
	mock := &MockErrorResponse{ctrl: ctrl}
	mock.recorder = &MockErrorResponseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockErrorResponse) EXPECT() *MockErrorResponseMockRecorder {
	return m.recorder
}

// Error mocks base method.
func (m *MockErrorResponse) Error() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(string)
	return ret0
}

// Error indicates an expected call of Error.
func (mr *MockErrorResponseMockRecorder) Error() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockErrorResponse)(nil).Error))
}

// RespondError mocks base method.
func (m *MockErrorResponse) RespondError(e echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RespondError", e)
	ret0, _ := ret[0].(error)
	return ret0
}

// RespondError indicates an expected call of RespondError.
func (mr *MockErrorResponseMockRecorder) RespondError(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RespondError", reflect.TypeOf((*MockErrorResponse)(nil).RespondError), e)
}
