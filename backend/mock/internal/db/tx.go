// Code generated by MockGen. DO NOT EDIT.
// Source: internal/db/tx.go

// Package db is a generated GoMock package.
package db

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	sqlx "github.com/jmoiron/sqlx"
)

// MocktxBeginnable is a mock of txBeginnable interface.
type MocktxBeginnable struct {
	ctrl     *gomock.Controller
	recorder *MocktxBeginnableMockRecorder
}

// MocktxBeginnableMockRecorder is the mock recorder for MocktxBeginnable.
type MocktxBeginnableMockRecorder struct {
	mock *MocktxBeginnable
}

// NewMocktxBeginnable creates a new mock instance.
func NewMocktxBeginnable(ctrl *gomock.Controller) *MocktxBeginnable {
	mock := &MocktxBeginnable{ctrl: ctrl}
	mock.recorder = &MocktxBeginnableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocktxBeginnable) EXPECT() *MocktxBeginnableMockRecorder {
	return m.recorder
}

// BeginTxx mocks base method.
func (m *MocktxBeginnable) BeginTxx(ctx context.Context, opts *sql.TxOptions) (*sqlx.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTxx", ctx, opts)
	ret0, _ := ret[0].(*sqlx.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTxx indicates an expected call of BeginTxx.
func (mr *MocktxBeginnableMockRecorder) BeginTxx(ctx, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTxx", reflect.TypeOf((*MocktxBeginnable)(nil).BeginTxx), ctx, opts)
}
