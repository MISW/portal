// Code generated by MockGen. DO NOT EDIT.
// Source: domain/repository/external_integration_repository.go

// Package repository is a generated GoMock package.
package repository

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockExternalIntegrationRepository is a mock of ExternalIntegrationRepository interface.
type MockExternalIntegrationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockExternalIntegrationRepositoryMockRecorder
}

// MockExternalIntegrationRepositoryMockRecorder is the mock recorder for MockExternalIntegrationRepository.
type MockExternalIntegrationRepositoryMockRecorder struct {
	mock *MockExternalIntegrationRepository
}

// NewMockExternalIntegrationRepository creates a new mock instance.
func NewMockExternalIntegrationRepository(ctrl *gomock.Controller) *MockExternalIntegrationRepository {
	mock := &MockExternalIntegrationRepository{ctrl: ctrl}
	mock.recorder = &MockExternalIntegrationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExternalIntegrationRepository) EXPECT() *MockExternalIntegrationRepositoryMockRecorder {
	return m.recorder
}

// GetUserRoleFromSlackID mocks base method.
func (m *MockExternalIntegrationRepository) GetUserRoleFromSlackID(slackID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserRoleFromSlackID", slackID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserRoleFromSlackID indicates an expected call of GetUserRoleFromSlackID.
func (mr *MockExternalIntegrationRepositoryMockRecorder) GetUserRoleFromSlackID(slackID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserRoleFromSlackID", reflect.TypeOf((*MockExternalIntegrationRepository)(nil).GetUserRoleFromSlackID), slackID)
}
