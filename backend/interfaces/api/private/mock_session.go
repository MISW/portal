// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces/api/private/session.go

// Package private is a generated GoMock package.
package private

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	echo "github.com/labstack/echo/v4"
)

// MockSessionHandler is a mock of SessionHandler interface.
type MockSessionHandler struct {
	ctrl     *gomock.Controller
	recorder *MockSessionHandlerMockRecorder
}

// MockSessionHandlerMockRecorder is the mock recorder for MockSessionHandler.
type MockSessionHandlerMockRecorder struct {
	mock *MockSessionHandler
}

// NewMockSessionHandler creates a new mock instance.
func NewMockSessionHandler(ctrl *gomock.Controller) *MockSessionHandler {
	mock := &MockSessionHandler{ctrl: ctrl}
	mock.recorder = &MockSessionHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionHandler) EXPECT() *MockSessionHandlerMockRecorder {
	return m.recorder
}

// Logout mocks base method.
func (m *MockSessionHandler) Logout(e echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", e)
	ret0, _ := ret[0].(error)
	return ret0
}

// Logout indicates an expected call of Logout.
func (mr *MockSessionHandlerMockRecorder) Logout(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockSessionHandler)(nil).Logout), e)
}
