// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces/api/private/management.go

// Package private is a generated GoMock package.
package private

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	echo "github.com/labstack/echo/v4"
)

// MockManagementHandler is a mock of ManagementHandler interface.
type MockManagementHandler struct {
	ctrl     *gomock.Controller
	recorder *MockManagementHandlerMockRecorder
}

// MockManagementHandlerMockRecorder is the mock recorder for MockManagementHandler.
type MockManagementHandlerMockRecorder struct {
	mock *MockManagementHandler
}

// NewMockManagementHandler creates a new mock instance.
func NewMockManagementHandler(ctrl *gomock.Controller) *MockManagementHandler {
	mock := &MockManagementHandler{ctrl: ctrl}
	mock.recorder = &MockManagementHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManagementHandler) EXPECT() *MockManagementHandlerMockRecorder {
	return m.recorder
}

// AddPaymentStatus mocks base method.
func (m *MockManagementHandler) AddPaymentStatus(e echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPaymentStatus", e)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPaymentStatus indicates an expected call of AddPaymentStatus.
func (mr *MockManagementHandlerMockRecorder) AddPaymentStatus(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPaymentStatus", reflect.TypeOf((*MockManagementHandler)(nil).AddPaymentStatus), e)
}

// AuthorizeTransaction mocks base method.
func (m *MockManagementHandler) AuthorizeTransaction(e echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthorizeTransaction", e)
	ret0, _ := ret[0].(error)
	return ret0
}

// AuthorizeTransaction indicates an expected call of AuthorizeTransaction.
func (mr *MockManagementHandlerMockRecorder) AuthorizeTransaction(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthorizeTransaction", reflect.TypeOf((*MockManagementHandler)(nil).AuthorizeTransaction), e)
}

// DeletePaymentStatus mocks base method.
func (m *MockManagementHandler) DeletePaymentStatus(e echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePaymentStatus", e)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePaymentStatus indicates an expected call of DeletePaymentStatus.
func (mr *MockManagementHandlerMockRecorder) DeletePaymentStatus(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePaymentStatus", reflect.TypeOf((*MockManagementHandler)(nil).DeletePaymentStatus), e)
}

// GetConfig mocks base method.
func (m *MockManagementHandler) GetConfig(e echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfig", e)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetConfig indicates an expected call of GetConfig.
func (mr *MockManagementHandlerMockRecorder) GetConfig(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfig", reflect.TypeOf((*MockManagementHandler)(nil).GetConfig), e)
}

// GetPaymentStatus mocks base method.
func (m *MockManagementHandler) GetPaymentStatus(e echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentStatus", e)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetPaymentStatus indicates an expected call of GetPaymentStatus.
func (mr *MockManagementHandlerMockRecorder) GetPaymentStatus(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentStatus", reflect.TypeOf((*MockManagementHandler)(nil).GetPaymentStatus), e)
}

// GetPaymentStatuses mocks base method.
func (m *MockManagementHandler) GetPaymentStatuses(e echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentStatuses", e)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetPaymentStatuses indicates an expected call of GetPaymentStatuses.
func (mr *MockManagementHandlerMockRecorder) GetPaymentStatuses(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentStatuses", reflect.TypeOf((*MockManagementHandler)(nil).GetPaymentStatuses), e)
}

// GetUser mocks base method.
func (m *MockManagementHandler) GetUser(e echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", e)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetUser indicates an expected call of GetUser.
func (mr *MockManagementHandlerMockRecorder) GetUser(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockManagementHandler)(nil).GetUser), e)
}

// ListUsers mocks base method.
func (m *MockManagementHandler) ListUsers(e echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", e)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockManagementHandlerMockRecorder) ListUsers(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockManagementHandler)(nil).ListUsers), e)
}

// RemindPayment mocks base method.
func (m *MockManagementHandler) RemindPayment(e echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemindPayment", e)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemindPayment indicates an expected call of RemindPayment.
func (mr *MockManagementHandlerMockRecorder) RemindPayment(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemindPayment", reflect.TypeOf((*MockManagementHandler)(nil).RemindPayment), e)
}

// SetConfig mocks base method.
func (m *MockManagementHandler) SetConfig(e echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetConfig", e)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetConfig indicates an expected call of SetConfig.
func (mr *MockManagementHandlerMockRecorder) SetConfig(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConfig", reflect.TypeOf((*MockManagementHandler)(nil).SetConfig), e)
}

// UpdateRole mocks base method.
func (m *MockManagementHandler) UpdateRole(e echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRole", e)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRole indicates an expected call of UpdateRole.
func (mr *MockManagementHandlerMockRecorder) UpdateRole(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRole", reflect.TypeOf((*MockManagementHandler)(nil).UpdateRole), e)
}

// UpdateUser mocks base method.
func (m *MockManagementHandler) UpdateUser(e echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", e)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockManagementHandlerMockRecorder) UpdateUser(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockManagementHandler)(nil).UpdateUser), e)
}
