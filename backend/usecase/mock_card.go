// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/card.go

// Package usecase is a generated GoMock package.
package usecase

import (
	context "context"
	reflect "reflect"

	domain "github.com/MISW/Portal/backend/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockCardUsecase is a mock of CardUsecase interface.
type MockCardUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockCardUsecaseMockRecorder
}

// MockCardUsecaseMockRecorder is the mock recorder for MockCardUsecase.
type MockCardUsecaseMockRecorder struct {
	mock *MockCardUsecase
}

// NewMockCardUsecase creates a new mock instance.
func NewMockCardUsecase(ctrl *gomock.Controller) *MockCardUsecase {
	mock := &MockCardUsecase{ctrl: ctrl}
	mock.recorder = &MockCardUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCardUsecase) EXPECT() *MockCardUsecaseMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockCardUsecase) Get(ctx context.Context, userID int) (*domain.Card, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, userID)
	ret0, _ := ret[0].(*domain.Card)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCardUsecaseMockRecorder) Get(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCardUsecase)(nil).Get), ctx, userID)
}
