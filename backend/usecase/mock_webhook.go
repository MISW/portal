// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/webhook.go

// Package usecase is a generated GoMock package.
package usecase

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockWebhookUsecase is a mock of WebhookUsecase interface.
type MockWebhookUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockWebhookUsecaseMockRecorder
}

// MockWebhookUsecaseMockRecorder is the mock recorder for MockWebhookUsecase.
type MockWebhookUsecaseMockRecorder struct {
	mock *MockWebhookUsecase
}

// NewMockWebhookUsecase creates a new mock instance.
func NewMockWebhookUsecase(ctrl *gomock.Controller) *MockWebhookUsecase {
	mock := &MockWebhookUsecase{ctrl: ctrl}
	mock.recorder = &MockWebhookUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWebhookUsecase) EXPECT() *MockWebhookUsecaseMockRecorder {
	return m.recorder
}

// NewUser mocks base method.
func (m *MockWebhookUsecase) NewUser(ctx context.Context, email, slackID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewUser", ctx, email, slackID)
	ret0, _ := ret[0].(error)
	return ret0
}

// NewUser indicates an expected call of NewUser.
func (mr *MockWebhookUsecaseMockRecorder) NewUser(ctx, email, slackID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewUser", reflect.TypeOf((*MockWebhookUsecase)(nil).NewUser), ctx, email, slackID)
}
